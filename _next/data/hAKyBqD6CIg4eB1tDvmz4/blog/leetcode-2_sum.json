{"pageProps":{"source":{"compiledSource":"var c=Object.defineProperty,d=Object.defineProperties;var l=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var u=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,r=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&u(e,n,t[n]);if(i)for(var n of i(t))s.call(t,n)&&u(e,n,t[n]);return e},p=(e,t)=>d(e,l(t));var h=(e,t)=>{var n={};for(var a in e)o.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(e!=null&&i)for(var a of i(e))t.indexOf(a)<0&&s.call(e,a)&&(n[a]=e[a]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var a=n,{components:e}=a,t=h(a,[\"components\"]);return mdx(MDXLayout,p(r(r({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"a\",r({parentName:\"p\"},{href:\"https://leetcode.com/problems/two-sum/\"}),\"LeetCode 1 - Two Sum\")),mdx(\"h3\",null,\"Problem Statement\"),mdx(\"p\",null,`Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.`),mdx(\"h3\",null,\"Concept\"),mdx(\"p\",null,`This question is a great example a HashMap or key value pairs. The key to solve this question is to understand, this requires the first matching pair, as it require only one solution.\nWhile we start looping through the given array, we check if the element is stored in dict (HashMap, object) here. If not, we will save the (sum \\u2013 current element value) as index and index as value, since we need to return the index of both the element.\nLet\\u2019s take an example,\nnums=`,\"[2, 7, 11, 15]\",`\ntarget=9`),mdx(\"p\",null,\"for the first element\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"\",\"\\xA0\",\"\\xA0\",\"\\xA0\",\"el=2, index =0, dict = {}\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"\",\"\\xA0\",\"\\xA0\",\"\\xA0\",\"check if 2 in dict exists:\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"\",\"\\xA0\",\"\\xA0\",\"\\xA0\",\"if not, we will save dict\",\"[target-el]\",\" = index ==> dict{7: 0}\"),mdx(\"p\",null,\"let\\u2019s read the next element 7,\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"el=2, index =1, dict = {7: 0}\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"\",\"\\xA0\",\"\\xA0\",\"\\xA0\",\"check if dict of 7 exists:\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"\",\"\\xA0\",\"\\xA0\",\"\\xA0\",\" yes, we can return the current index, and value of dict\",\"[7]\",` which is in fact index of 2 which is at position 0 as we seen in previous step.\nLet\\u2019s convert this into code.`),mdx(\"h3\",null,\"Code\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-python\"}),`\ndef twoSum(self, nums, target: int):\n    outDict = {}\n    for idx, val in enumerate(nums):\n        if val in outDict:\n            return [outDict[val], idx]\n        else:\n            outDict[target - val] = idx\n    return []\n\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{"title":"Leetcode 1 - Two Sum","date":"2021-05-25","author":"Shashank Rawat","summary":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order."}},"frontMatter":{"title":"Leetcode 1 - Two Sum","date":"2021-05-25","author":"Shashank Rawat","summary":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order."}},"__N_SSG":true}