{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"**URL - ** \", _jsx(_components.a, {\n        href: \"//leetcode.com/problems/two-sum/\",\n        children: \"Two Sum\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Problem Statement\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\nYou can return the answer in any order.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Concept\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This question is a great example a HashMap or key value pairs. The key to solve this question is to understand, this requires the first matching pair, as it require only one solution.\\nWhile we start looping through the given array, we check if the element is stored in dict (HashMap, object) here. If not, we will save the (sum – current element value) as index and index as value, since we need to return the index of both the element.\\nLet’s take an example,\\nnums=[2, 7, 11, 15]\\ntarget=9\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"for the first element\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"el=2, index =0, dict = {}  \\ncheck if 2 in dict exists:  \\nif not, we will save dict[target-el] = index ==> dict{7: 0}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"let’s read the next element 7,  \\nel=2, index =1, dict = {7: 0}  \\ncheck if dict of 7 exists:  \\n yes, we can return the current index, and value of dict[7] which is in fact index of 2 which is at position 0 as we seen in previous step.\\nLet’s convert this into code.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Code\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"\\ndef twoSum(self, nums, target: int):\\n    outDict = {}\\n    for idx, val in enumerate(nums):\\n        if val in outDict:\\n            return [outDict[val], idx]\\n        else:\\n            outDict[target - val] = idx\\n    return []\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Leetcode 1 - Two Sum","date":"2021-05-25","author":"Shashank Rawat","summary":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order."}},"frontMatter":{"title":"Leetcode 1 - Two Sum","date":"2021-05-25","author":"Shashank Rawat","summary":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order."},"prev":null,"next":{"slug":"leetcode/leetcode-121_best-time-to-buy-and-sell-stock","title":"Leetcode 121 - Best Time to Buy and Sell Stock","date":"3 June 2021","author":"Shashank Rawat","summary":"You are given an array prices where prices[i] is the price of a given stock on the i'th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."}},"__N_SSG":true}