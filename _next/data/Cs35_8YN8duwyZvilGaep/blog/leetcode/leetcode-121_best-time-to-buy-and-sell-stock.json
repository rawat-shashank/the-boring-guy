{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"**URL - ** \", _jsx(_components.a, {\n        href: \"//leetcode.com/problems/best-time-to-buy-and-sell-stock/\",\n        children: \"Best Time to Buy and Sell Stock\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Problem Statement\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You are given an array prices where prices[i] is the price of a given stock on the i'th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Concept\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In this problem we need to find the max profit, which basically means, lower number from left and higher number from right. We will try to manage the lowest number and profit using \", _jsx(_components.strong, {\n        children: \"Kadane’s\"\n      }), \" algorithm.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let’s initialize the number like below\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"min_val, profit = float('inf'), 0\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"min_val is the float(‘inf’) because we are subtracting the min with current value (which gives as cur max vs profit which is max so far).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After this we will loop throughout the list and will try to find the current max and max so far, while maintain the min val.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"for x in prices:\\n        profit = max(profit, x - min_val)\\n        min_val = min(x, min_val)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"which will return the max profit after the loop, making sure we find the solution in one loop.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Complexity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Time : \", _jsx(_components.strong, {\n        children: \"O(n)\"\n      }), \" - Looping once\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Space: \", _jsx(_components.strong, {\n        children: \"O(2) => O(1)\"\n      }), \" - since we are managing only two variables\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Code\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"\\ndef maxProfit(self, prices: List[int]) -> int:\\n    min_val, profit = float('inf'), 0\\n    for x in prices:\\n        profit = max(profit, x - min_val)\\n        min_val = min(x, min_val)\\n    return profit\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Leetcode 121 - Best Time to Buy and Sell Stock","date":"2021-06-03","author":"Shashank Rawat","summary":"You are given an array prices where prices[i] is the price of a given stock on the i'th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."}},"frontMatter":{"title":"Leetcode 121 - Best Time to Buy and Sell Stock","date":"2021-06-03","author":"Shashank Rawat","summary":"You are given an array prices where prices[i] is the price of a given stock on the i'th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."},"prev":{"slug":"leetcode/leetcode-2_sum","title":"Leetcode 1 - Two Sum","date":"25 May 2021","author":"Shashank Rawat","summary":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order."},"next":{"slug":"leetcode/leetcode-217_contains-duplicate","title":"Leetcode 217 - Contains Duplicate","date":"7 June 2021","author":"Shashank Rawat","summary":"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."}},"__N_SSG":true}