{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"**URL - ** \", _jsx(_components.a, {\n        href: \"//leetcode.com/problems/contains-duplicate/\",\n        children: \"Contains Duplicate\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Problem Statement\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Concept\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This question asks to figure out if the array contains a duplicate element. We need to make sure if all elements are distinct or not.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To make sure all elements are distinct, we will need to iterate them once, and while iterating we will save each element in a dictionary. Since key search is O(1) in dictionary, it will make our algorithm to find if any element is duplicated or not\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Iteration\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"    for x in nums\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Search\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"    if x in data\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the data is not there in the dictionary, we can add the element into the dictionary. And if the iteration is over without any match, then we have a unique or distinct array.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Complexity\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Time : \", _jsx(_components.strong, {\n        children: \"O(n)\"\n      }), \" - As mentioned earlier we will iterate is once in the worst case, which is array is unique or distinct.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Space: \", _jsx(_components.strong, {\n        children: \"O(n)\"\n      }), \" - In the worst case we will be storying all the elements as key.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Code\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"\\ndef containsDuplicate(self, nums) -> bool:\\n    data = {}\\n    for x in nums:\\n        if x in data:\\n            return True\\n        else:\\n            data[x] = x\\n    return False\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Leetcode 217 - Contains Duplicate","date":"2021-06-07","author":"Shashank Rawat","summary":"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."}},"frontMatter":{"title":"Leetcode 217 - Contains Duplicate","date":"2021-06-07","author":"Shashank Rawat","summary":"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."},"prev":{"slug":"leetcode/leetcode-121_best-time-to-buy-and-sell-stock","title":"Leetcode 121 - Best Time to Buy and Sell Stock","date":"3 June 2021","author":"Shashank Rawat","summary":"You are given an array prices where prices[i] is the price of a given stock on the i'th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."},"next":{"slug":"nextjs/intro-to-nextjs","title":"Intro to Next.js","date":"6 July 2021","author":"Shashank Rawat","summary":"Next.js is an open-source React front-end development web framework created by Vercel that enables functionality such as server-side rendering and generating static websites for React based web applications."}},"__N_SSG":true}